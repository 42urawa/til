const React = require('react');
const {
  useState,
  useCallback,
  useEffect
} = require('react');
const {
  Box,
  Text,
  useApp,
  useInput
} = require('ink');
const TextInput = require('ink-text-input').default;
const skinTone = require('skin-tone');
const mem = require('mem');
const emoj = require('.');

// From https://usehooks.com/useDebounce/
const useDebouncedValue = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
};

// Limit it to 7 results so not to overwhelm the user
// This also reduces the chance of showing unrelated emojis
const fetch = mem(async (string, upperBound) => {
  const array = await emoj(string);
  return array.slice(0, upperBound);
});
const STAGE_CHECKING = 0;
const STAGE_SEARCH = 1;
const STAGE_COPIED = 2;
const QueryInput = ({
  query,
  placeholder,
  onChange
}) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
  bold: true,
  color: "cyan"
}, "\u203A", ' '), /*#__PURE__*/React.createElement(TextInput, {
  showCursor: false,
  value: query,
  placeholder: placeholder,
  onChange: onChange
}));
const CopiedMessage = ({
  emoji
}) => /*#__PURE__*/React.createElement(Text, {
  color: "green"
}, `${emoji} has been copied to the clipboard`);
const Search = ({
  query,
  emojis,
  skinNumber,
  selectedIndex,
  onChangeQuery
}) => {
  const list = emojis.map((emoji, index) => /*#__PURE__*/React.createElement(Text, {
    key: emoji,
    backgroundColor: index === selectedIndex && 'gray'
  }, ' ', skinTone(emoji, skinNumber), ' '));
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    paddingTop: 1,
    paddingBottom: emojis.length === 0 ? 2 : 0
  }, /*#__PURE__*/React.createElement(QueryInput, {
    query: query,
    placeholder: "Relevant emojis will appear when you start writing",
    onChange: onChangeQuery
  }), /*#__PURE__*/React.createElement(Box, {
    paddingTop: 1
  }, list));
};
const Emoj = ({
  skinNumber: initialSkinNumber,
  limit,
  onSelectEmoji
}) => {
  const {
    exit
  } = useApp();
  const [stage, setStage] = useState(STAGE_CHECKING);
  const [query, setQuery] = useState('');
  const [emojis, setEmojis] = useState([]);
  const [skinNumber, setSkinNumber] = useState(initialSkinNumber);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [selectedEmoji, setSelectedEmoji] = useState();
  useEffect(() => {
    if (selectedEmoji && stage === STAGE_COPIED) {
      onSelectEmoji(selectedEmoji);
    }
  }, [selectedEmoji, stage, onSelectEmoji]);
  const changeQuery = useCallback(query => {
    setSelectedIndex(0);
    setEmojis([]);
    setQuery(query);
  });
  useEffect(() => {
    setStage(STAGE_SEARCH);
  }, []);
  const debouncedQuery = useDebouncedValue(query, 200);
  useEffect(() => {
    if (debouncedQuery.length <= 1) {
      return;
    }
    let isCanceled = false;
    const run = async () => {
      const emojis = await fetch(debouncedQuery, limit);

      // Don't update state when this effect was canceled to avoid
      // results that don't match the search query
      if (!isCanceled) {
        setEmojis(emojis);
      }
    };
    run();
    return () => {
      isCanceled = true;
    };
  }, [debouncedQuery]);
  useInput((input, key) => {
    if (key.escape || key.ctrl && input === 'c') {
      exit();
      return;
    }
    if (key.return) {
      if (emojis.length > 0) {
        setSelectedEmoji(skinTone(emojis[selectedIndex], skinNumber));
        setStage(STAGE_COPIED);
      }
      return;
    }

    // Select emoji by typing a number
    // Catch all 10 keys, but handle only the same amount of keys
    // as there are currently emojis
    const numberKey = Number(input);
    if (numberKey >= 0 && numberKey <= 9) {
      if (numberKey >= 1 && numberKey <= emojis.length) {
        setSelectedEmoji(skinTone(emojis[numberKey - 1], skinNumber));
        setStage(STAGE_COPIED);
      }
      return;
    }

    // Filter out all ansi sequences except the up/down keys which change the skin tone
    // and left/right keys which select emoji inside a list
    const isArrowKey = key.upArrow || key.downArrow || key.leftArrow || key.rightArrow;
    if (!isArrowKey || query.length <= 1) {
      return;
    }
    if (key.upArrow && skinNumber < 5) {
      setSkinNumber(skinNumber + 1);
    }
    if (key.downArrow && skinNumber > 0) {
      setSkinNumber(skinNumber - 1);
    }
    if (key.rightArrow) {
      if (selectedIndex < emojis.length - 1) {
        setSelectedIndex(selectedIndex + 1);
      } else {
        setSelectedIndex(0);
      }
    }
    if (key.leftArrow) {
      if (selectedIndex > 0) {
        setSelectedIndex(selectedIndex - 1);
      } else {
        setSelectedIndex(emojis.length - 1);
      }
    }
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, stage === STAGE_COPIED && /*#__PURE__*/React.createElement(CopiedMessage, {
    emoji: selectedEmoji
  }), stage === STAGE_SEARCH && /*#__PURE__*/React.createElement(Search, {
    query: query,
    emojis: emojis,
    skinNumber: skinNumber,
    selectedIndex: selectedIndex,
    onChangeQuery: changeQuery
  }));
};
module.exports = Emoj;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwiQm94IiwiVGV4dCIsInVzZUFwcCIsInVzZUlucHV0IiwiVGV4dElucHV0IiwiZGVmYXVsdCIsInNraW5Ub25lIiwibWVtIiwiZW1vaiIsInVzZURlYm91bmNlZFZhbHVlIiwidmFsdWUiLCJkZWxheSIsImRlYm91bmNlZFZhbHVlIiwic2V0RGVib3VuY2VkVmFsdWUiLCJ0aW1lciIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJmZXRjaCIsInN0cmluZyIsInVwcGVyQm91bmQiLCJhcnJheSIsInNsaWNlIiwiU1RBR0VfQ0hFQ0tJTkciLCJTVEFHRV9TRUFSQ0giLCJTVEFHRV9DT1BJRUQiLCJRdWVyeUlucHV0IiwicXVlcnkiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwiY3JlYXRlRWxlbWVudCIsImJvbGQiLCJjb2xvciIsInNob3dDdXJzb3IiLCJDb3BpZWRNZXNzYWdlIiwiZW1vamkiLCJTZWFyY2giLCJlbW9qaXMiLCJza2luTnVtYmVyIiwic2VsZWN0ZWRJbmRleCIsIm9uQ2hhbmdlUXVlcnkiLCJsaXN0IiwibWFwIiwiaW5kZXgiLCJrZXkiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmbGV4RGlyZWN0aW9uIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJsZW5ndGgiLCJFbW9qIiwiaW5pdGlhbFNraW5OdW1iZXIiLCJsaW1pdCIsIm9uU2VsZWN0RW1vamkiLCJleGl0Iiwic3RhZ2UiLCJzZXRTdGFnZSIsInNldFF1ZXJ5Iiwic2V0RW1vamlzIiwic2V0U2tpbk51bWJlciIsInNldFNlbGVjdGVkSW5kZXgiLCJzZWxlY3RlZEVtb2ppIiwic2V0U2VsZWN0ZWRFbW9qaSIsImNoYW5nZVF1ZXJ5IiwiZGVib3VuY2VkUXVlcnkiLCJpc0NhbmNlbGVkIiwicnVuIiwiaW5wdXQiLCJlc2NhcGUiLCJjdHJsIiwicmV0dXJuIiwibnVtYmVyS2V5IiwiTnVtYmVyIiwiaXNBcnJvd0tleSIsInVwQXJyb3ciLCJkb3duQXJyb3ciLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93IiwiRnJhZ21lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7Qm94LCBUZXh0LCB1c2VBcHAsIHVzZUlucHV0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZSgnaW5rLXRleHQtaW5wdXQnKS5kZWZhdWx0O1xuY29uc3Qgc2tpblRvbmUgPSByZXF1aXJlKCdza2luLXRvbmUnKTtcbmNvbnN0IG1lbSA9IHJlcXVpcmUoJ21lbScpO1xuY29uc3QgZW1vaiA9IHJlcXVpcmUoJy4nKTtcblxuLy8gRnJvbSBodHRwczovL3VzZWhvb2tzLmNvbS91c2VEZWJvdW5jZS9cbmNvbnN0IHVzZURlYm91bmNlZFZhbHVlID0gKHZhbHVlLCBkZWxheSkgPT4ge1xuXHRjb25zdCBbZGVib3VuY2VkVmFsdWUsIHNldERlYm91bmNlZFZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRzZXREZWJvdW5jZWRWYWx1ZSh2YWx1ZSk7XG5cdFx0fSwgZGVsYXkpO1xuXG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0fTtcblx0fSwgW3ZhbHVlLCBkZWxheV0pO1xuXG5cdHJldHVybiBkZWJvdW5jZWRWYWx1ZTtcbn07XG5cbi8vIExpbWl0IGl0IHRvIDcgcmVzdWx0cyBzbyBub3QgdG8gb3ZlcndoZWxtIHRoZSB1c2VyXG4vLyBUaGlzIGFsc28gcmVkdWNlcyB0aGUgY2hhbmNlIG9mIHNob3dpbmcgdW5yZWxhdGVkIGVtb2ppc1xuY29uc3QgZmV0Y2ggPSBtZW0oYXN5bmMgKHN0cmluZywgdXBwZXJCb3VuZCkgPT4ge1xuXHRjb25zdCBhcnJheSA9IGF3YWl0IGVtb2ooc3RyaW5nKTtcblx0cmV0dXJuIGFycmF5LnNsaWNlKDAsIHVwcGVyQm91bmQpO1xufSk7XG5cbmNvbnN0IFNUQUdFX0NIRUNLSU5HID0gMDtcbmNvbnN0IFNUQUdFX1NFQVJDSCA9IDE7XG5jb25zdCBTVEFHRV9DT1BJRUQgPSAyO1xuXG5jb25zdCBRdWVyeUlucHV0ID0gKHtxdWVyeSwgcGxhY2Vob2xkZXIsIG9uQ2hhbmdlfSkgPT4gKFxuXHQ8Qm94PlxuXHRcdDxUZXh0IGJvbGQgY29sb3I9XCJjeWFuXCI+XG5cdFx0XHTigLp7JyAnfVxuXHRcdDwvVGV4dD5cblxuXHRcdDxUZXh0SW5wdXQgc2hvd0N1cnNvcj17ZmFsc2V9IHZhbHVlPXtxdWVyeX0gcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfSBvbkNoYW5nZT17b25DaGFuZ2V9Lz5cblx0PC9Cb3g+XG4pO1xuXG5jb25zdCBDb3BpZWRNZXNzYWdlID0gKHtlbW9qaX0pID0+IChcblx0PFRleHQgY29sb3I9XCJncmVlblwiPlxuXHRcdHtgJHtlbW9qaX0gaGFzIGJlZW4gY29waWVkIHRvIHRoZSBjbGlwYm9hcmRgfVxuXHQ8L1RleHQ+XG4pO1xuXG5jb25zdCBTZWFyY2ggPSAoe3F1ZXJ5LCBlbW9qaXMsIHNraW5OdW1iZXIsIHNlbGVjdGVkSW5kZXgsIG9uQ2hhbmdlUXVlcnl9KSA9PiB7XG5cdGNvbnN0IGxpc3QgPSBlbW9qaXMubWFwKChlbW9qaSwgaW5kZXgpID0+IChcblx0XHQ8VGV4dFxuXHRcdFx0a2V5PXtlbW9qaX1cblx0XHRcdGJhY2tncm91bmRDb2xvcj17aW5kZXggPT09IHNlbGVjdGVkSW5kZXggJiYgJ2dyYXknfVxuXHRcdD5cblx0XHRcdHsnICd9XG5cdFx0XHR7c2tpblRvbmUoZW1vamksIHNraW5OdW1iZXIpfVxuXHRcdFx0eycgJ31cblx0XHQ8L1RleHQ+XG5cdCkpO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgcGFkZGluZ1RvcD17MX0gcGFkZGluZ0JvdHRvbT17ZW1vamlzLmxlbmd0aCA9PT0gMCA/IDIgOiAwfT5cblx0XHRcdDxRdWVyeUlucHV0XG5cdFx0XHRcdHF1ZXJ5PXtxdWVyeX1cblx0XHRcdFx0cGxhY2Vob2xkZXI9XCJSZWxldmFudCBlbW9qaXMgd2lsbCBhcHBlYXIgd2hlbiB5b3Ugc3RhcnQgd3JpdGluZ1wiXG5cdFx0XHRcdG9uQ2hhbmdlPXtvbkNoYW5nZVF1ZXJ5fVxuXHRcdFx0Lz5cblx0XHRcdDxCb3ggcGFkZGluZ1RvcD17MX0+XG5cdFx0XHRcdHtsaXN0fVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59O1xuXG5jb25zdCBFbW9qID0gKHtza2luTnVtYmVyOiBpbml0aWFsU2tpbk51bWJlciwgbGltaXQsIG9uU2VsZWN0RW1vaml9KSA9PiB7XG5cdGNvbnN0IHtleGl0fSA9IHVzZUFwcCgpO1xuXHRjb25zdCBbc3RhZ2UsIHNldFN0YWdlXSA9IHVzZVN0YXRlKFNUQUdFX0NIRUNLSU5HKTtcblx0Y29uc3QgW3F1ZXJ5LCBzZXRRdWVyeV0gPSB1c2VTdGF0ZSgnJyk7XG5cdGNvbnN0IFtlbW9qaXMsIHNldEVtb2ppc10gPSB1c2VTdGF0ZShbXSk7XG5cdGNvbnN0IFtza2luTnVtYmVyLCBzZXRTa2luTnVtYmVyXSA9IHVzZVN0YXRlKGluaXRpYWxTa2luTnVtYmVyKTtcblx0Y29uc3QgW3NlbGVjdGVkSW5kZXgsIHNldFNlbGVjdGVkSW5kZXhdID0gdXNlU3RhdGUoMCk7XG5cdGNvbnN0IFtzZWxlY3RlZEVtb2ppLCBzZXRTZWxlY3RlZEVtb2ppXSA9IHVzZVN0YXRlKCk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAoc2VsZWN0ZWRFbW9qaSAmJiBzdGFnZSA9PT0gU1RBR0VfQ09QSUVEKSB7XG5cdFx0XHRvblNlbGVjdEVtb2ppKHNlbGVjdGVkRW1vamkpO1xuXHRcdH1cblx0fSwgW3NlbGVjdGVkRW1vamksIHN0YWdlLCBvblNlbGVjdEVtb2ppXSk7XG5cblx0Y29uc3QgY2hhbmdlUXVlcnkgPSB1c2VDYWxsYmFjayhxdWVyeSA9PiB7XG5cdFx0c2V0U2VsZWN0ZWRJbmRleCgwKTtcblx0XHRzZXRFbW9qaXMoW10pO1xuXHRcdHNldFF1ZXJ5KHF1ZXJ5KTtcblx0fSk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRzZXRTdGFnZShTVEFHRV9TRUFSQ0gpO1xuXHR9LCBbXSk7XG5cblx0Y29uc3QgZGVib3VuY2VkUXVlcnkgPSB1c2VEZWJvdW5jZWRWYWx1ZShxdWVyeSwgMjAwKTtcblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChkZWJvdW5jZWRRdWVyeS5sZW5ndGggPD0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxldCBpc0NhbmNlbGVkID0gZmFsc2U7XG5cblx0XHRjb25zdCBydW4gPSBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBlbW9qaXMgPSBhd2FpdCBmZXRjaChkZWJvdW5jZWRRdWVyeSwgbGltaXQpO1xuXG5cdFx0XHQvLyBEb24ndCB1cGRhdGUgc3RhdGUgd2hlbiB0aGlzIGVmZmVjdCB3YXMgY2FuY2VsZWQgdG8gYXZvaWRcblx0XHRcdC8vIHJlc3VsdHMgdGhhdCBkb24ndCBtYXRjaCB0aGUgc2VhcmNoIHF1ZXJ5XG5cdFx0XHRpZiAoIWlzQ2FuY2VsZWQpIHtcblx0XHRcdFx0c2V0RW1vamlzKGVtb2ppcyk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJ1bigpO1xuXG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGlzQ2FuY2VsZWQgPSB0cnVlO1xuXHRcdH07XG5cdH0sIFtkZWJvdW5jZWRRdWVyeV0pO1xuXG5cdHVzZUlucHV0KChpbnB1dCwga2V5KSA9PiB7XG5cdFx0aWYgKGtleS5lc2NhcGUgfHwgKGtleS5jdHJsICYmIGlucHV0ID09PSAnYycpKSB7XG5cdFx0XHRleGl0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGtleS5yZXR1cm4pIHtcblx0XHRcdGlmIChlbW9qaXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRzZXRTZWxlY3RlZEVtb2ppKHNraW5Ub25lKGVtb2ppc1tzZWxlY3RlZEluZGV4XSwgc2tpbk51bWJlcikpO1xuXHRcdFx0XHRzZXRTdGFnZShTVEFHRV9DT1BJRUQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gU2VsZWN0IGVtb2ppIGJ5IHR5cGluZyBhIG51bWJlclxuXHRcdC8vIENhdGNoIGFsbCAxMCBrZXlzLCBidXQgaGFuZGxlIG9ubHkgdGhlIHNhbWUgYW1vdW50IG9mIGtleXNcblx0XHQvLyBhcyB0aGVyZSBhcmUgY3VycmVudGx5IGVtb2ppc1xuXHRcdGNvbnN0IG51bWJlcktleSA9IE51bWJlcihpbnB1dCk7XG5cdFx0aWYgKG51bWJlcktleSA+PSAwICYmIG51bWJlcktleSA8PSA5KSB7XG5cdFx0XHRpZiAobnVtYmVyS2V5ID49IDEgJiYgbnVtYmVyS2V5IDw9IGVtb2ppcy5sZW5ndGgpIHtcblx0XHRcdFx0c2V0U2VsZWN0ZWRFbW9qaShza2luVG9uZShlbW9qaXNbbnVtYmVyS2V5IC0gMV0sIHNraW5OdW1iZXIpKTtcblx0XHRcdFx0c2V0U3RhZ2UoU1RBR0VfQ09QSUVEKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlciBvdXQgYWxsIGFuc2kgc2VxdWVuY2VzIGV4Y2VwdCB0aGUgdXAvZG93biBrZXlzIHdoaWNoIGNoYW5nZSB0aGUgc2tpbiB0b25lXG5cdFx0Ly8gYW5kIGxlZnQvcmlnaHQga2V5cyB3aGljaCBzZWxlY3QgZW1vamkgaW5zaWRlIGEgbGlzdFxuXHRcdGNvbnN0IGlzQXJyb3dLZXkgPSBrZXkudXBBcnJvdyB8fCBrZXkuZG93bkFycm93IHx8IGtleS5sZWZ0QXJyb3cgfHwga2V5LnJpZ2h0QXJyb3c7XG5cblx0XHRpZiAoIWlzQXJyb3dLZXkgfHwgcXVlcnkubGVuZ3RoIDw9IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoa2V5LnVwQXJyb3cgJiYgc2tpbk51bWJlciA8IDUpIHtcblx0XHRcdHNldFNraW5OdW1iZXIoc2tpbk51bWJlciArIDEpO1xuXHRcdH1cblxuXHRcdGlmIChrZXkuZG93bkFycm93ICYmIHNraW5OdW1iZXIgPiAwKSB7XG5cdFx0XHRzZXRTa2luTnVtYmVyKHNraW5OdW1iZXIgLSAxKTtcblx0XHR9XG5cblx0XHRpZiAoa2V5LnJpZ2h0QXJyb3cpIHtcblx0XHRcdGlmIChzZWxlY3RlZEluZGV4IDwgZW1vamlzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0c2V0U2VsZWN0ZWRJbmRleChzZWxlY3RlZEluZGV4ICsgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRTZWxlY3RlZEluZGV4KDApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChrZXkubGVmdEFycm93KSB7XG5cdFx0XHRpZiAoc2VsZWN0ZWRJbmRleCA+IDApIHtcblx0XHRcdFx0c2V0U2VsZWN0ZWRJbmRleChzZWxlY3RlZEluZGV4IC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXRTZWxlY3RlZEluZGV4KGVtb2ppcy5sZW5ndGggLSAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiAoXG5cdFx0PD5cblx0XHRcdHtzdGFnZSA9PT0gU1RBR0VfQ09QSUVEICYmIDxDb3BpZWRNZXNzYWdlIGVtb2ppPXtzZWxlY3RlZEVtb2ppfS8+fVxuXHRcdFx0e3N0YWdlID09PSBTVEFHRV9TRUFSQ0ggJiYgKFxuXHRcdFx0XHQ8U2VhcmNoXG5cdFx0XHRcdFx0cXVlcnk9e3F1ZXJ5fVxuXHRcdFx0XHRcdGVtb2ppcz17ZW1vamlzfVxuXHRcdFx0XHRcdHNraW5OdW1iZXI9e3NraW5OdW1iZXJ9XG5cdFx0XHRcdFx0c2VsZWN0ZWRJbmRleD17c2VsZWN0ZWRJbmRleH1cblx0XHRcdFx0XHRvbkNoYW5nZVF1ZXJ5PXtjaGFuZ2VRdWVyeX1cblx0XHRcdFx0Lz5cblx0XHRcdCl9XG5cdFx0PC8+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVtb2o7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUNDLFFBQVE7RUFBRUMsV0FBVztFQUFFQztBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUMzRCxNQUFNO0VBQUNJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQyxNQUFNO0VBQUVDO0FBQVEsQ0FBQyxHQUFHUCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3BELE1BQU1RLFNBQVMsR0FBR1IsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNTLE9BQU87QUFDbkQsTUFBTUMsUUFBUSxHQUFHVixPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3JDLE1BQU1XLEdBQUcsR0FBR1gsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUMxQixNQUFNWSxJQUFJLEdBQUdaLE9BQU8sQ0FBQyxHQUFHLENBQUM7O0FBRXpCO0FBQ0EsTUFBTWEsaUJBQWlCLEdBQUdBLENBQUNDLEtBQUssRUFBRUMsS0FBSyxLQUFLO0VBQzNDLE1BQU0sQ0FBQ0MsY0FBYyxFQUFFQyxpQkFBaUIsQ0FBQyxHQUFHaEIsUUFBUSxDQUFDYSxLQUFLLENBQUM7RUFFM0RYLFNBQVMsQ0FBQyxNQUFNO0lBQ2YsTUFBTWUsS0FBSyxHQUFHQyxVQUFVLENBQUMsTUFBTTtNQUM5QkYsaUJBQWlCLENBQUNILEtBQUssQ0FBQztJQUN6QixDQUFDLEVBQUVDLEtBQUssQ0FBQztJQUVULE9BQU8sTUFBTTtNQUNaSyxZQUFZLENBQUNGLEtBQUssQ0FBQztJQUNwQixDQUFDO0VBQ0YsQ0FBQyxFQUFFLENBQUNKLEtBQUssRUFBRUMsS0FBSyxDQUFDLENBQUM7RUFFbEIsT0FBT0MsY0FBYztBQUN0QixDQUFDOztBQUVEO0FBQ0E7QUFDQSxN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